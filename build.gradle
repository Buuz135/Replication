buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    // This should be below the net.minecraftforge.gradle plugin
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}



group = 'com.buuz135'
version = '1.20.1-1.0.4'

java {
    archivesBaseName = 'Replication'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'info'

            property 'forge.enabledGameTestNamespaces', 'Replication'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                replication {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'Replication'

            mods {
                replication {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'replication', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                replication {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name 'jared maven'
        url "https://maven.blamejared.com/"
    }

    maven { url = 'https://ldtteam.jfrog.io/ldtteam/modding' }
    maven {
        url = "https://www.cursemaven.com"
    }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.20.1-47.0.19'


    if (findProject(':titanium') != null) {
        implementation project(':titanium')
    } else {
        implementation fg.deobf(project.dependencies.create('com.hrznstudio:titanium:1.20.1-3.8.27'))
    }
    compileOnly fg.deobf("mezz.jei:jei-1.20.1-common-api:15.2.0.23")
    compileOnly fg.deobf("mezz.jei:jei-1.20.1-forge-api:15.2.0.23")
    // at runtime, use the full JEI jar for Forge
    runtimeOnly fg.deobf("mezz.jei:jei-1.20.1-forge:15.1.0.19")

    //runtimeOnly fg.deobf("${aequivaleo_location}:${aequivaleo_version}:universal")
    //compileOnly fg.deobf("${aequivaleo_location}:${aequivaleo_version}:api")
    //compileOnly fg.deobf("${aequivaleo_location}:${aequivaleo_version}:vanillaapi")
    implementation fg.deobf("curse.maven:aequivaleo-404450:5277323")

    runtimeOnly fg.deobf("curse.maven:industrial-foregoing-266515:4683880")
    implementation fg.deobf("curse.maven:jade-324717:5072729")
    //runtimeOnly fg.deobf("curse.maven:world-stripper-250603:4578579")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "replication",
                "Specification-Vendor"    : "Buuz135, Rid",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Buuz135, Rid",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}